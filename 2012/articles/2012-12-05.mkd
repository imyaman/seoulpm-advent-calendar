Title:    펄은 파싱할 수 없다: 형식적인 증명
Package:  Seoul.pm
Category: perl
Category: Seoul.pm
Author:   am0c


저자
-----

[Jeffrey Kegler][author]


펄은 파싱할 수 없다: 형식적인 증명
-----------------------------------------

<!--
Perl Cannot Be Parsed: A Formal Proof
-->

<!--
[ UPDATE 27 Aug 2009: Readers interested in the topic of this node will want to look first (or instead) at the series of three articles I wrote for The Perl Review, now available online. They lay this proof out more carefully and with thorough explanations, in three different versions. ]
-->

<!--
[ At this point this post should be considered mainly of historical interest. One especial defect is that it frames the issue in terms of "static parsing", implying that there are no similar issues with "dynamic" parsing. ]
-->

<!--
In the man page for PPI, Adam Kennedy conjectures that perl is unparseable, and suggests how to prove it. Below I carry out a rigorous version of the proof, which should put the matter beyond doubt.
-->

[아담 케네디][wiki-adam]는 [PPI][module-ppi] 문서에서 펄의 구문 분석(파싱)은 불가능하다고 추측했습니다.
그리고 이것을 어떻게 증명하는지 보였습니다. 아래에 이 엄격한 형식의 증명을 첨부하였습니다.
여기서 _동적_ 구문 분석과 유사한 이슈는 제외하는 것으로 가정합시다.

<!--
I've become interested in the question because I've just released an alpha version of a general parser (Parse::Marpa) on CPAN, which I think will allow static parsing of large portions of Perl 5, and I wanted to know what is achievable. Parse::Marpa accepts any BNF that's free of infinite loops. The BNF can be recursive, have empty productions or even be ambiguous. If Marpa works for parsing Perl 5, it will do it with a lot less cruft than ad hoc solutions. Parse::Marpa is based on new research into combining LR(0) precomputation with Earley's algorithm and so far speed seems good -- quite acceptable for utility purposes.
-->

저는 이 문제에 호기심을 가지고 있었습니다.
전반적 용도의 파서인 [Parse::Marpa][module-parse-marpa]의 알파 버전을 CPAN에 배포한 상황이었기 때문이죠.
저는 이것으로 펄 코드의 대부분을 정적 구문 분석을 할 수 있다고 생각했습니다.
그리고 무엇이 가능한지 알고 싶었죠. [Parse::Marpa][module-parse-marpa]는 어떠한 [BNF][wiki-bnf]도 받을 수 있습니다.
BNF는 재귀적일 수도 공백의 생성 규칙이나 모호한 규칙을 포함할 수도 있습니다.
[Marpa][module-parse-marpa]를 펄의 구문을 분석하는 것에 사용하면 에드혹 방식의 해결책보다 훨신 덜 불쾌할 것입니다.
[Parse::Marpa][module-parse-marpa]는 LR(0)의 선행 연산 부분과 [얼리의 알고리즘][wiki-earley-parser]을 합치는
새롭게 연구된 방식을 취하여 빠른 속도를 자랑합니다.
특히 유틸리티 목적에 알맞습니다.

<!--
For those not familiar with the history of this discussion, the term "parse" here is being used in its strict sense to mean static parsing -- taking a piece of code and determining its structure without executing it. In that strict sense the Perl program does not parse Perl. The Perl program executes Perl code, but does not determine its structure. Adam Kennedy gives a good account of the discussion. Randal Schwartz played a key role in it, and one of his perlmonks nodes is pivotal.
-->

이 논란에 처음이신 분들을 위해 말씀드리자면 여기서의 구문 분석, 즉 파스(parse)란 정적인 구문 분석을 의미합니다.
즉, 받은 코드 조각의 구조를 실행하지 않고 결정하는 것입니다.
정적인 구문 분석으로 엄밀하게 보면 펄 프로그램조차 펄의 구문을 분석하지는 않습니다.
펄 프로그램은 펄 코드를 실행하기는 하지만, 이것의 구조를 결정하지는 않습니다.
아담 케네디는 이 논의에서 고려할 사항을 잘 내놓았습니다.
랜달 슈워츠는 이 논의에 중추적인 역할을 했고, 특히 그가 쓴 하나의 펄몽스 게시물이 중요한 역할을 했습니다.

<!--
Static parsing of Perl 5 is of a lot more than academic interest, as Adam Kennedy shows. It is needed for automated documentation tools, analyzers like Perl::Critic, presentation tools, automatic transformation of Perl code, etc.
-->

펄의 정적 구문 분석은, 아담 케네디가 보여준 바와 같이, 학문적 호기심 이상의 의미가 있습니다.
자동화된 문서 도구나 [Perl::Critic][module-perl-critic]과 같은 분석 도구에도 필요하며,
펄의 표현이나 자동화된 변형을 위해서도 필요합니다.

<!--
The proof which follows meets the current level of rigor in Theory of Computation, but is written using Perl and Perl notation. That would make the following unacceptable to a math journal, but they wouldn't take it anyway, because the theorem is a very straightforward consequence of Rice's Theorem. 
-->

아래의 증명은 엄격한 계산이론 수준에 달하는 내용입니다.
하지만 펄을 사용하고 펄의 표기법을 사용했습니다.
따라서 수학 저널에 등재할 수는 없을 것입니다.
사실, 그들은 어쨌든 이 글을 받지 않을 겁니다.
[라이스의 정리][wiki-rice-theorem]를 자세한 정리 없이 아주 직설적인 순서로 논할 것이기 때문입니다.

<!--
Theorem: Parsing Perl 5 is Undecidable
-->

정리: 펄 5 구문 분석은 결정 불가능하다
---------------------------------------

<!--
We first establish Adam Kennedy's conjecture as a lemma. The proof will follow immediately from that and the Halting Theorem.
-->

먼저 아담 케네디의 추측을 보조정리로 두겠습니다.
바로 그 뒤에 증명과 정지 문제에 대해 다룹니다.

<!--
Kennedy's Lemma: If you can parse Perl, you can solve the Halting Problem.
-->

> 케네디의 보조정리:
> 펄의 구문을 분석할 수 있으면, [정지 문제][wiki-halting-problem]를 풀 수 있다.

<!--
To prove Kennedy's Lemma, we assume that we can parse Perl. In particular this means we can take the following devilish snippet of code, concocted by Randal Schwartz, and determine the correct parse for it:
-->

케네디의 보조정리를 증명하기 위해, 우리가 펄의 구문을 분석할 수 있다고 가정합니다.
이 가정을 통해, 특히 우리는 [랜달 슈와츠][wiki-randal]가 고안해 낸 다음의 악마같은 코드 조각도 이해할 수 있다고 생각할 수 있습니다.

    #!perl
    whatever  / 25 ; # / ; die "this dies!"; 

<!--
    Schwartz's Snippet can parse two different ways: if whatever is nullary (that is, takes no arguments), the first statement is a division in void context, and the rest of the line is a comment. If whatever takes an argument, Schwartz's Snippet parses as a call to the whatever function with the result of a match operator, then a call to the die() function.
-->

슈와츠의 코드 조각은 두가지 방법의 구문으로 분석될 수 있습니다.
`whatever`가 어떠한 인자도 받지 않는 연산자(nullary)라면, 첫번째 문장은 공백(void) 문맥에서의 나눗셈 문장이고 남은 부분은 주석입니다.
`whatever`가 인자를 받는다면, 이 코드는 일치 연산자의 반환값을 인자로 받는 `whatever` 함수를 호출한 뒤 `die()` 함수를 호출하는 것으로 구문 분석됩니다.

<!--
This means that, in order to statically parse Perl, it must be possible to determine from a string of Perl 5 code whether it establishes a nullary prototype for the whatever subroutine. Since we've assumed we can parse Perl, we can assume that a subroutine to do this exists. Call the subroutine which takes as its only argument a Perl 5 code string, and returns true if and only if that code string establishes a nullary prototype for the whatever subroutine, is_whatever_nullary().
-->

이것이 의미하는 바는, 안정적으로 펄의 구문을 분석하기 위해서는
반드시 어떠한 사용자 함수가 인자를 받는 함수 원형(prototype)인지 아닌지 알아야 한다는 것입니다.
우리가 펄의 구문을 분석할 수 있다고 가정하였으므로, 우리는 이것을 알아낼 수 있는 사용자 함수도 존재한다고 가정합니다.
특히 이 사용자 함수를, 펄 코드를 문자열로 받아서
문자열에 포함된 `whatever` 함수가 인자를 받지 않는 함수 원형이면 참을 반환하는 `is_whatever_nullary()` 함수라고 정의합니다.

<!--
To drag the Halting Theorem into this, we'll need to simulate a Turing machine or its equivalent. It's very evident that Perl 5 is Turing-complete. No referee at a math journal would require something that obvious and that tedious to be proved. The term used in these cases is "left as an exercise to the reader". But in this case, there is an Acme::Turing, so the exercise apparently has already been done.
-->

정지 문제를 도출하기 위해서, 우리는 튜링 기계나 이와 상등한 것으로 모의 실험을 해야 합니다.
펄이 튜링 완전하다는 것은 분명한 사실입니다.
수학 저널의 어떤 심사원도 이렇게 당연한 것을 장황하게 증명하도록 요구하지 않을 것입니다.
이 경우를 전문 용어로 "독자에게 연습 문제로 남긴다"고 합니다만,
우리에겐 [Acme::Turing][module-acme-turing] 모듈이 있기 때문에 이미 해결된 것이나 마찬가지로 보이는군요.

<!--
We wrap the Turing machine simulator of our choice in a routine that takes two strings as its arguments, and treats the first string as the representation of a Turing machine, and the second as its input. Call this run_turing_machine.
-->

우리가 찾은 튜링 기계 모의 실험기를 두 개의 문자열을 인자로 받는 함수로 포장합시다.
첫번째 인자는 튜링 기계의 표현이고 두번째 인자는 튜링 기계의 입력입니다.
이렇게 완성된 `run_turing_machin()`을 호출합니다.

<!--
Now we write a routine, call it halts(), which takes the description of a Turing machine and its input. We have it create (but not run) a Perl 5 code string to run the Turing machine simulator on the machine description and input from our two arguments, and then establish a nullary prototype for whatever. We next ask is_whatever_nullary() whether the nullary prototype for whatever was established. Our halts() routine might look like this:
-->

이번에는 튜링 기계의 설명과 입력을 받는 `halts()` 루틴을 작성합시다.
우리는 이미 이것을 펄 코드로 만들었습니다.
이 코드는, 우리가 직접 실행하지는 않았지만, 두 개의 인자로부터 기계 표현과 입력 자료를 받는
튜링 기계 모의 실험기를 실행한 후, 인자를 받지 않는 원형을 가지는 `whatever` 함수를 만듭니다.
그런 다음 `is_whatever_nullary()`에게 인자를 받지 않는 원형의 `whatever` 함수가 만들어졌는지 물어봅니다.
우리의 `halts()` 루틴은 아래와 같을 것입니다.

    #!perl
    sub halts {
        my $machine = shift;
        my $input = shift;
        my $code_string_to_analyze = qq{
            BEGIN {
                run_turing_machine("\Q$machine\E", "\Q$input\E");
                sub whatever() {};
            }
        };
        is_whatever_nullary($code_string_to_analyze);
    }

<!--
    $code_string_to_analyze is passed as an argument to is_whatever_nullary(), which claims to be able to figure out, somehow, if the nullary whatever prototype is established. is_whatever_nullary() does not necessarily run $code_string_to_analyze. In fact if the Turing machine simulation does not halt, is_whatever_nullary() can't run $code_string_to_analyze, not and live up to the assumption that it will tell us whether the prototype is established or not. To do this, is_whatever_nullary() must somehow figure out when $machine does not halt with $input. Since the next thing in $code_string_to_analyze is the nullary prototype, if $machine halts with $input, is_whatever_nullary() will return true. If $machine does not halt with $input, the statement establishing the nullary whatever prototype will never be reached, and is_whatever_nullary() must return false.
-->

`$code_string_to_analyze`가 `is_whatever_nullary()`의 인자로 전달되면
이것이 어떤 방법으로든 인자가 없는 원형의 `whatever` 함수가 생성되었는지 알려줄 것입니다.
`is_whatever_nullary()`는 `$code_string_to_analyze`를 실행할 필요는 없습니다.
사실 튜링 기계 모의 실험이 끝나지 않으면 `is_whatever_nullary`가 `$code_string_to_analyze`를 실행할 수 없습니다.
또한 함수 원형이 설정되었는지 알려줄 수 있다는 가정에 기댈 수도 없을 것입니다.
따라서, `is_whatever_nullary()`는 반드시 어떤 방법으로든 언제 `$machine`이 `$input`의 입력으로 정지하지 않는지 알아내야 합니다.
`$code_string_to_analyze` 내부 코드에 인자가 없는 함수 원형의 뒤따라오기 때문에,
`$machine`이 `$input` 입력으로 도중에 멈춘다면 `is_whatever_nullary`는 참을 반환할 것입니다.
`$machine`이 `$input` 입력으로 도중에 멈추지 않는다면 인자 없는 함수 원형의 선언에 결국 도달하지 못하고
`is_whatever_nullary`는 거짓을 반환해야만 합니다.

<!--
So, given the assumption that we can parse Perl, halts() returns true if and only if the Turing machine $machine halts with input $input. In other words, halts() solves the Halting Problem. Kennedy's Lemma was that, if you can parse Perl, you can solve the Halting Problem. So this proves Kennedy's Lemma.
-->

따라서, 우리가 펄의 구문을 분석할 수 있다고 가정한 것에 의해 `halts()`는
튜링 기계인 `$machine`이 `$input` 입력으로 멈추는 필요충분한 경우에만 참을 반환합니다.
다르게 말하면, `halts()`는 정지 문제를 해결합니다.
케네디의 보조정리는, 펄의 구문을 분석할 수 있으면 정지 문제를 풀 수 있다는 것이었습니다.
이것으로 케네디의 보조정리가 증명됩니다.

<!--
It's well known that the Halting Problem cannot be solved. Kennedy's Lemma establishes that if we can parse Perl 5, we can solve the Halting Problem. Therefore we cannot parse Perl 5.
-->

정지 문제는 판정할 수 없다는 것은 잘 알려진 사실입니다.
케네디의 보조정리가 펄의 구문을 분석할 수 있으면 정지 문제를 판정할 수 있다는 것이 됩니다.
따라서 우리는 펄의 구문을 분석할 수 없습니다.

<!--
QED 
-->

_QED_


옮기며
-------

이 글의 원문은 Perlmonks의 [Perl Cannot Be Parsed: A Formal Proof][node]이며,
역자는 [@am0c][am0c]입니다.
2008년에 처음 게시되었으며, 정적 파싱 구문에 대해서만 다루므로 지금은
조금 역사적인 의미가 더 크다고 할 수 있습니다.
저자는 이후에 [Perl Review에 총 3 파트로 나누어][perlreview-undecidability]
더 조밀하고 깊게 다루었습니다.
perlmonks를 통해 저자에게 해당 노드를 번역하여 달력 기사에 쓸 것은 허락받았습니다.
더 자세한 내용은 원문과 Perl Review의 글을 참고해 주세요.


[author]: http://www.jeffreykegler.com/
[node]: http://www.perlmonks.org/?node_id=663393
[am0c]: http://twitter.com/am0c

[perlreview-undecidability]: http://www.jeffreykegler.com/Home/perl-and-undecidability

[module-parse-marpa]: http://metacpan.org/module/Marpa::PP
[module-perl-critic]: http://metacpan.org/module/Perl::Critic
[module-ppi]:         http://metacpan.org/module/PPI
[module-acme-turing]: http://metacpan.org/module/Acme::Turing

[wiki-bnf]: http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_Form
[wiki-adam]: http://en.wikipedia.org/wiki/Adam_Kennedy_%28programmer%29
[wiki-randal]: http://en.wikipedia.org/wiki/Randal_L._Schwartz
[wiki-halting-problem]: http://ko.wikipedia.org/wiki/%EC%A0%95%EC%A7%80_%EB%AC%B8%EC%A0%9C
[wiki-earley-parser]: http://en.wikipedia.org/wiki/Earley_parser
[wiki-rice-theorem]: http://en.wikipedia.org/wiki/Rice%27s_theorem
